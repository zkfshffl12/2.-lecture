-- sample8.sql


-- ------------------------------------------------------
-- 8. PL/SQL 패키지(Package)
-- ------------------------------------------------------
--  가. 비슷한 처리(기능)을 수행하는 다수의 프로시저와 함수의
--      집합인 오라클 객체
--  나. 실제 회사에서는, 급여관리/인사관리/제고관리 등, 다양한
--      업무로직이 있고, 이에 대해, 각각 프로시저와 함수를 생성
--      하여 사용
--  다. 다양한 업무로직에 따른, 프로시저와 함수들은, 회사의 규모
--      와 수행업무에 따라, 많이 생성될 수 있음
--  라. 프로시저와 함수가 많아지면, 어떤 함수나 프로시저가 어떤
--      업무를 처리하는지 식별하기 어려워짐
--  마. 따라서, 비슷한 유형의 작업을 처리하는 프로시저나 함수를
--      패키지(Package)로 묶어서, 모듈화(Modularization)
--      시키면, 효율적으로 관리가능
--  바. 프로시저나 함수와 다르게, 아래의 두 부분으로 구성됨:
--      (1) 패키지 명세부(Package specification)
--          a. 변수, 상수, 커서(Cursor), 프로시저, 함수 선언 부
--          b. 선언된 위의 요소들은, 모두 PUBLIC 속성을 가짐
--          c. So 위의 요소들은, 패키지 외부에서 접근 가능
--      (2) 패키지 구현부(Package body)
--          a. 패키지 명세부에서 선언한 내용의 실제 구현 부
--          b. 패키지 선언부에서 커서/프로시저/함수 선언한 경우,
--             구현부에서, 커서를 구성하는 SQL문, 프로시저, 함수
--             의 구체적인 처리내용을 기술해야 함 
-- ------------------------------------------------------

-- ------------------------------------------------------
-- 8-1. PL/SQL 패키지: 패키지 명세부(선언부)
-- ------------------------------------------------------
--  Basic syntax: Package_spec_syntax.JPG
--
--  a. CREATE PACKAGE : 패키지명 지정
--  b. IS : 변수/상수/예외/커서/프로시저/함수 선언
--  c. 패키지 명세부(선언부)에서 선언한 요소들(변수,상수,..)은
--     외부에서 참조가능
--  d. END 패키지명: 패키지 명세부(선언부) 작성종료
--  e. 현재 패키지가 어떤 작업을 수행하는지는, 자세히 알 수 없음
--  f. 실제 작업수행 코드는, 패키지 구현부를 통해, 기술되어짐
-- ------------------------------------------------------

-- ------------------------------------------------------
-- 8-2. PL/SQL 패키지: 패키지 구현부
-- ------------------------------------------------------
--  Basic syntax: Package_impl_syntax.JPG
--
--  a. 패키지 선언부와 동일하게, 상수/변수 등을 선언가능
--  b. But 패키지 구현부에서 선언된, 상수/변수 등은, 외부에서
--     참조 불가
--  c. 패키지 선언부에서 선언된 커서/함수/프로시저 등의 세부적인
--     구현부분은, 패키지 구현부에서 작성되어야 함
--  d. 사용문법은, 일반적인 함수/프로시저 생성과 동일
-- ------------------------------------------------------

-- ------------------------------------------------------
-- 8-3. PL/SQL 패키지: 패키지 사용
-- ------------------------------------------------------
--  Basic syntax: Package_use_syntax.JPG
-- ------------------------------------------------------


-- ------------------------------------------------------
-- 예1: 구구한 프로시저와 문자열 소문자 변경 함수를 패키지로 생성
-- ------------------------------------------------------

-- 1. 패키지 선언부: 프로시저와 함수 선언
-- ------------------------------------------------------
CREATE OR REPLACE PACKAGE mypackage
-- IS
AS
    -- 특정 단수의 구구단 출력 프로시저 선언
    PROCEDURE gugudan (dansu NUMBER);

    -- 문자열을 소문자로 변경하는 함수 선언
    FUNCTION mylower(p_value VARCHAR2) RETURN VARCHAR2;

    -- 지정된 반지름을 가지는 원의 면적 구하는 함수 선언
    function circleArea(p_radius number) return number;

    -- 원주율 PI 상수 선언
    PI CONSTANT NUMBER := 3.14159;

END mypackage;


-- 2. 패키지 구현부: 프로시저와 함수 구현
-- ------------------------------------------------------
CREATE OR REPLACE PACKAGE BODY mypackage
-- IS
AS

    -- 특정 단수의 구구단 출력 프로시저 구현
    PROCEDURE gugudan (dansu NUMBER)
    IS
    BEGIN

        FOR i IN 1..9 LOOP
            DBMS_OUTPUT.put_line( dansu || ' x ' || i || ' = ' || dansu * i );
        END LOOP;

    END;    -- end gugudan


    -- 문자열을 소문자로 변경하는 함수 구현
    FUNCTION mylower (p_value VARCHAR2) RETURN VARCHAR2
    IS
    BEGIN

        RETURN lower(p_value);

    END;    -- end mylower


    -- 지정된 반지름을 가지는 원의 면적 구하는 함수 구현
    function circleArea(p_radius number) return number
    as
    begin

        -- 패키지 선언부에 선언되어 있는 상수 사용
        -- 이때, 굳이 패키지명.상수명 으로 참조할 필요없이,
        -- 상수 이름만으로 접근가능

        -- return mypackage.PI * p_radius * p_radius;      -- OK
        return PI * p_radius * p_radius;                -- OK

    end;    -- end circleArea

END mypackage;  -- end mypackage


-- 3. 패키지 사용방법: 프로시저와 함수 호출
-- ------------------------------------------------------

-- 3-1. 패키지.프로시저(전달인자값) 호출
EXEC mypackage.gugudan(7);


-- 3-2. 패키지.함수(전달인자값) 호출
SELECT
    ename,
    mypackage.mylower(ename)
FROM
    emp;





