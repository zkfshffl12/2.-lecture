-- sample3.sql


-- ------------------------------------------------------
-- 3. PL/SQL 제어문
-- ------------------------------------------------------
--  가. 다른 프로그래밍 언어에서 제공하는 다양한 제어문 제공
--  나. 실행 흐름을 제어
--  다. 제어문의 종류:
--      (1) 조건문 : 특정 조건에 일치하는 경우에만 실행
--          a. 단일 IF-THEN 문
--          b. IF-THEN-ELSE 문
--          c. IF-THEN-ELSIF-ELSE 문
--          d. CASE 문
--      (2) 반복문 : 반복적으로 실행
--          a. LOOP 문
--          b. WHILE 문
--          c. FOR 문
--          d. CONTINUE 키워드
--          e. EXIT 키워드
-- ------------------------------------------------------

-- ------------------------------------------------------
-- 3-1. PL/SQL 조건문: 단일 IF-THEN 문
-- ------------------------------------------------------
--  가. 조건에 일치하는 경우에만 특정문장 수행
--  나. 기본문법: Simple-IT-THEN_syntax.JPG
--  다. IF 로 시작, END-IF 로 끝난다
--  라. IF 뒤에 조건식과 THEN 키워드 지정
--  마. 조건식이 참인 경우에만, THEN 이후 문장 실행
--  바. 조건식이 거짓인 경우에는, THEN 이후 문장 실행 안함
-- ------------------------------------------------------

-- ------------------------------------------------------
--  예제: 사원번호가 7369인 사원의 부서번호를 얻어와,
--        이에 해당되는 부서명을 변수에 저장하여 출력
--       (SCOTT 계정으로 실행)
-- ------------------------------------------------------
DESC emp;


DECLARE     -- 선언부 (스칼라/참조 변수선언 부분)

    v_empno     NUMBER(4);          -- 스칼라변수 선언(초기값 없음, NULL로 초기화)
    v_ename     VARCHAR2(10);       -- 스칼라변수 선언(초기값 없음, NULL로 초기화)
    v_deptno    emp.deptno%TYPE;    -- 참조변수   선언(초기값 없음, NULL로 초기화)
    v_dname     VARCHAR2(10);       -- 스칼라변수 선언(초기값 없음, NULL로 초기화)

BEGIN       -- 실행부(Execution section) 시작

    SELECT empno, ename ,deptno

        -- INTO 절에, 선언부의 각 변수에 일대일로, 조회결과 저장
        INTO v_empno, v_ename , v_deptno
    FROM emp
    WHERE empno = 7369;

    DBMS_OUTPUT.put_line('1. v_empno:' || v_empno);
    DBMS_OUTPUT.put_line('2. v_ename:' || v_ename);
    DBMS_OUTPUT.put_line('3. v_deptno:' || v_deptno);


    -- Simple IF-THEN statement
    IF v_deptno = 10 THEN
        v_dname := 'ACCOUNTING';    -- 스칼라 변수에 값 저장(할당)
    END IF;     -- 조건문의 끝은 세미콜론(;) 으로 마감처리

    IF v_deptno = 20 THEN
        v_dname := 'RESEARCH';      -- 스칼라 변수에 값 저장(할당)
    END IF;     -- 조건문의 끝은 세미콜론(;) 으로 마감처리

    IF (v_deptno = 30) THEN         -- 조건식에 소괄호() 사용가능(연산순위 지정)
        v_dname := 'SALES';         -- 스칼라 변수에 값 저장(할당)
    END IF;     -- 조건문의 끝은 세미콜론(;) 으로 마감처리

    IF (v_deptno = 40) THEN         -- 조건식에 소괄호() 사용가능(연산순위 지정)
        v_dname := 'OPERATIONS';    -- 스칼라 변수에 값 저장(할당)
    END IF;     -- END IF: 조건문의 끝은 세미콜론(;) 으로 마감처리


    -- DBMS_OUTPUT 패키지의 put_line() 함수(Function):
    --  a. PL/SQL block 에서, 값을 출력하기 위해 제공되는 함수
    --  b. 문자열 리터털 및 변수 출력
    DBMS_OUTPUT.put_line('4. v_dname:' || v_dname);


    -- DBMS_OUTPUT 패키지의 put_line() 함수(Function):
    --  a. PL/SQL block 에서, 값을 출력하기 위해 제공되는 함수
    --  b. 문자열 리터털 및 변수 출력
    DBMS_OUTPUT.put_line( v_empno ||' ' || v_ename ||' ' || v_dname);

END;    -- 실행부 끝, PL/SQL Block 의 끝은, 세미콜론(;)으로 마감처리(**주의**)


-- ------------------------------------------------------
-- 3-2. PL/SQL 조건문: IF-THEN-ELSE 문
-- ------------------------------------------------------
--  가. 조건에 따라 실행되는 문장이 다른 경우에 사용
--  나. 기본문법: IF-THEN-ELSE_syntax.JPG
--  다. 조건이 참인 경우, 문장1 수행
--      거짓인 경우, 문장2 수행
-- ------------------------------------------------------

-- ------------------------------------------------------
--  예제: 사원번호가 7369인 사원이 커밋션을 받는지 여부 출력
--       (SCOTT 계정으로 실행)
-- ------------------------------------------------------
DESC emp;


DECLARE     -- 선언부 (스칼라/참조 변수선언 부분)

    v_empno emp.empno%TYPE; -- 참조변수 선언(초기값 없음, NULL로 초기화)
    v_ename emp.ename%TYPE; -- 참조변수 선언(초기값 없음, NULL로 초기화)
    v_comm  emp.comm%TYPE;  -- 참조변수 선언(초기값 없음, NULL로 초기화)

BEGIN       -- 실행부(Execution section) 시작

    SELECT empno, ename, comm

        -- INTO 절에, 선언부의 각 변수에 일대일로, 조회결과 저장
        INTO v_empno, v_ename, v_comm
    FROM emp
    WHERE empno = 7369;


    -- IF-THEN-ELSE 조건문
    IF ( v_comm IS NOT NULL ) THEN
        -- DBMS_OUTPUT 패키지의 put_line() 함수(Function):
        --  a. PL/SQL block 에서, 값을 출력하기 위해 제공되는 함수
        --  b. 문자열 리터털 및 변수 출력
        DBMS_OUTPUT.put_line( v_ename ||'의 커미션은 ' || v_comm || ' 입니다');
    ELSE    
        -- DBMS_OUTPUT 패키지의 put_line() 함수(Function):
        --  a. PL/SQL block 에서, 값을 출력하기 위해 제공되는 함수
        --  b. 문자열 리터털 및 변수 출력
        DBMS_OUTPUT.put_line( v_ename || '은 커미션을 받지 않습니다');
    END IF;     -- END IF-THEN-ELSE: 조건문의 끝은 세미콜론(;) 으로 마감처리

END;    -- 실행부 끝, PL/SQL Block 의 끝은, 세미콜론(;)으로 마감처리(**주의**)


-- ------------------------------------------------------
-- 3-3. PL/SQL 조건문: IF-THEN-ELSIF 문 / IF-THEN-ELSIF-ELSE 문
-- ------------------------------------------------------
--  가. 비교 조건이 여러 개인 경우에 사용
--  나. 기본 문법: IF-THEN-ELSIF_syntax.JPG
--  다. 조건식1이 참이면, 문장1 실행
--      조건식1이 거짓이면, ELSIF 문 실행되어, 조건식2 비교
--  라. 조건식2가 참이면, 문장2 실행
--      조건식2가 거짓이면, 문장3 실행
--  마. (*주의*) 일반 프로그램 언어에서는, "ELSE IF" 문을 제공
--      Oracle PL/SQL 에서는, "ELSIF" 임을 주의
-- ------------------------------------------------------

-- ------------------------------------------------------
--  예제: 사원번호가 7369인 사원의 부서명을 변수에 설정/출력
--       (SCOTT 계정으로 실행)
-- ------------------------------------------------------
DESC emp;


DECLARE     -- 선언부 (스칼라/참조 변수선언 부분)

    v_empno  NUMBER(4);          -- 스칼라변수 선언(초기값 없음, NULL로 초기화)
    v_ename  VARCHAR2(10);       -- 스칼라변수 선언(초기값 없음, NULL로 초기화)
    v_deptno emp.deptno%TYPE;    -- 참조변수 선언(초기값 없음, NULL로 초기화)
    v_dname  VARCHAR2(10);       -- 스칼라변수 선언(초기값 없음, NULL로 초기화)

BEGIN       -- 실행부(Execution section) 시작

    SELECT empno, ename ,deptno
        -- INTO 절에, 선언부의 각 변수에 일대일로, 조회결과 저장
        INTO v_empno, v_ename , v_deptno
    FROM emp
    WHERE empno = 7369;


    -- IF-THEN-ELSIF 문
    IF v_deptno = 10 THEN           -- 조건식1
        v_dname := 'ACCOUNTING';    -- 스칼라 변수에 값 대입(할당)
    ELSIF v_deptno = 20 THEN        -- 조건식2
        v_dname := 'RESEARCH';      -- 스칼라 변수에 값 대입(할당)
    ELSIF (v_deptno = 30) THEN      -- 조건식3 : 조건식에 소괄호() 사용가능(연산순위 지정)
        v_dname := 'SALES';         -- 스칼라 변수에 값 대입(할당)
    ELSIF (v_deptno = 40) THEN      -- 조건식4 : 조건식에 소괄호() 사용가능(연산순위 지정)
        v_dname := 'OPERATIONS';    -- 스칼라 변수에 값 대입(할당)
    END IF; -- END IF-THEN-ELSIF: 조건문의 끝은 세미콜론(;) 으로 마감처리


    -- DBMS_OUTPUT 패키지의 put_line() 함수(Function):
    --  a. PL/SQL block 에서, 값을 출력하기 위해 제공되는 함수
    --  b. 문자열 리터털 및 변수 출력
    DBMS_OUTPUT.put_line(v_empno || ', ' || v_ename || ', ' || v_dname);

END;    -- 실행부 끝, PL/SQL Block 의 끝은, 세미콜론(;)으로 마감처리(**주의**)


-- ------------------------------------------------------
-- 3-4. PL/SQL 조건문: CASE 문
-- ------------------------------------------------------
--  가. IF-THEN-ELIF 문과 마찬가지
--  나. 비교조건이 여러개 인 경우에 사용
--  다. DQL(SELECT문)의 CASE 문과 문법이 동일
--  라. 기본문법: CASE-WHEN_syntax.JPG
--  마. CASE 절의 표현식과 WHEN 절의 비교값들을 차례대로 비교
--      일치하는 THEN 절의 결과값을 반환
--      모두 일치하지 않으면, ELSE절(*생략가능*) 결과값4 반환
-- ------------------------------------------------------

-- ------------------------------------------------------
--  예제: 등급에 따라, 출력 메시지를 다르게 함
--       (SCOTT 계정으로 실행)
-- ------------------------------------------------------
DESC emp;


DECLARE     -- 선언부 (스칼라/참조 변수선언 부분)

    v_grade CHAR(1) := 'B';     -- 스칼라변수 선언(초기값 있음, 'B' 문자열로 초기화)
    v_message VARCHAR2(20);     -- 스칼라변수 선언(초기값 없음, NULL로 초기화)

BEGIN       -- 실행부(Execution section) 시작

    v_message :=                        -- 변수에, CASE 문의 결과값 대입(할당)
        -- CASE 문
        CASE v_grade                    -- 표현식(값을 생성하는 식)
            WHEN 'A' THEN 'Excellent'   -- 표현식의 값이 'A' 이라면, 결과값1 반환
            WHEN 'B' THEN 'Very Good'   -- 표현식의 값이 'B' 이라면, 결과값2 반환
            WHEN 'C' THEN 'Good'        -- 표현식의 값이 'C' 이라면, 결과값3 반환
            ELSE 'Bad'                  -- 모든 조건이 거짓이라면,   결과값4 반환
        END; -- END CASE: 조건문의 끝은 세미콜론(;) 으로 마감처리


    -- DBMS_OUTPUT 패키지의 put_line() 함수(Function):
    --  a. PL/SQL block 에서, 값을 출력하기 위해 제공되는 함수
    --  b. 문자열 리터털 및 변수 출력
    DBMS_OUTPUT.put_line( v_grade || ': '|| v_message);

END;    -- 실행부 끝, PL/SQL Block 의 끝은, 세미콜론(;)으로 마감처리(**주의**)


-- ------------------------------------------------------
-- 3-5. PL/SQL 반복문: LOOP 문
-- ------------------------------------------------------
--  가. SQL 문장을 여러 번 반복실행 하고자 할 때 사용
--  나. PL/SQL block 은 가장 기본적인 반복문
--  다. 기본문법: LOOP_syntax.JPG
--  라. LOOP 키워드로 시작 ~ END LOOP 키워드로 종료
--  마. LOOP ~ END LOOP 사이의 실행문장들을 반복적으로 실행
--  바. 아래의 경우, 무한루프에 빠질 수 있음 (**주의**)
--      a. EXIT 절을 지정하지 않거나
--      b. WHEN 절의 조건식이 일치하는 경우가 없으면
--  사. 일반적으로, 반복실행 문장들보다, 나중에 EXIT 절이
--      있으므로, 먼저 실행문장들이 실행된 후에, 
--      EXIT WHEN 절의 조건식 판단수행
--  아. EXIT WHEN 절의 조건식이 일치하지 않더라도, 적어도
--      한번은 실행문장들이 실행됨
--  자. 따라서, 조건이 일치하지 않더라도, 반드시 한번은
--      실행되어야 하는 문장인 경우에 사용
-- ------------------------------------------------------

-- ------------------------------------------------------
--  예제: HELLO 문자열 4번 출력
--       (SCOTT 계정으로 실행)
-- ------------------------------------------------------
DECLARE     -- 선언부 (스칼라/참조 변수선언 부분)

    v_num NUMBER(2) := 1; -- 스칼라변수 선언(초기값 있음, 1 정수로 초기화)

BEGIN       -- 실행부(Execution section) 시작

    LOOP    -- 반복문의 시작

        -- DBMS_OUTPUT 패키지의 put_line() 함수(Function):
        --  a. PL/SQL block 에서, 값을 출력하기 위해 제공되는 함수
        --  b. 문자열 리터털 및 변수 출력
        DBMS_OUTPUT.put_line( v_num ||'. Hello' );    -- EXIT WHEN절과 상관없이, 반드시 한번 수행

        v_num := v_num + 1;     -- num 변수의 값을 +1 씩 증가

        -- EXIT WHEN 조건식(탈출조건) (*생략가능: 생략하면 무한루프)
        EXIT WHEN v_num > 4;  -- num 변수의 값이 4보다 크면, 참 -> EXIT(빠져나감)

    END LOOP;   -- END LOOP: 반복문의 끝은 세미콜론(;) 으로 마감처리

END;    -- 실행부 끝, PL/SQL Block 의 끝은, 세미콜론(;)으로 마감처리(**주의**)


-- ------------------------------------------------------
-- 3-6. PL/SQL 반복문: WHILE 문
-- ------------------------------------------------------
--  가. LOOP 반복문은, 조건이 일치하지 않더라도, 적어도
--      한번은 실행문장들이 수행
--  나. 조건이 먼저 나오기 때문에, 실행문장들이 한번도
--      수행되지 않을 수 있음
--  다. 기본문법: WHILE_syntax.JPG
--  라. 조건식이 참인 경우에만, 실행문장들이 수행
--  마. 조건식이 거짓인 경우, 반복을 빠져나감(LOOP 반복문과 반대)
-- ------------------------------------------------------

-- ------------------------------------------------------
--  예제: HELLO 문자열 4번 출력
--       (SCOTT 계정으로 실행)
-- ------------------------------------------------------
DECLARE     -- 선언부 (스칼라/참조 변수선언 부분)

    v_num NUMBER(2) := 1;   -- 스칼라변수 선언(초기값 있음, 1 정수로 초기화)

BEGIN       -- 실행부(Execution section) 시작

    -- WHILE 문
    WHILE v_num < 5 LOOP    -- 조건식이 참인 동안, 반복수행
    
        -- DBMS_OUTPUT 패키지의 put_line() 함수(Function):
        --  a. PL/SQL block 에서, 값을 출력하기 위해 제공되는 함수
        --  b. 문자열 리터털 및 변수 출력
        DBMS_OUTPUT.put_line( 'Hello' );

        v_num := v_num + 1;     -- v_num 변수의 값을 +1 씩 증가
        
    END LOOP; -- END WHILE: 반복문의 끝은 세미콜론(;) 으로 마감처리

END;    -- 실행부 끝, PL/SQL Block 의 끝은, 세미콜론(;)으로 마감처리(**주의**)


-- ------------------------------------------------------
-- 3-7. PL/SQL 반복문: FOR 문
-- ------------------------------------------------------
--  가. 앞선, LOOP/WHILE 문 모두, FOR문으로 변경가능(상호호환성 가짐)
--  나. 가장 큰 차이점:
--      a. 시작값과 최종값을 명시적으로 지정
--      b. 지정된 반복횟수만큼, 실행문장들을 반복 수행(**)
--  다. 기본문법: FOR_syntax.JPG
--      a. counter 변수: 묵시적으로 선언하므로, 명시적 선언하지 않음
--      b. LOOP 가 반복수행될 때마다, counter 변수의 값이 1씩 증감
--      c. IN 절 뒤에, 반복수행시킬, 시작값/최종값 지정:
--         반복횟수를 명시적으로 지정
--      d. REVERSE 키워드 지정: 반복횟수가 감소하는 방향으로 수행
-- ------------------------------------------------------

-- ------------------------------------------------------
--  예제: HELLO 문자열 4번 출력
--       (SCOTT 계정으로 실행)
-- ------------------------------------------------------

-- 변수가 필요없기 때문에, DECLARE 선언부는 작성하지 않았음 (생략가능)
-- DECLARE     -- 선언할 변수가 하나도 없더라도, DECLARE 선언부 작성가능
    
BEGIN       -- 실행부(Execution section) 시작

    -- FOR 반복문
    FOR counter IN 1..4 LOOP    -- counter 변수의 범위: 1 ~ 4까지 증가
    -- FOR counter IN REVERSE 1..4 LOOP    -- counter 변수의 범위: 4 ~ 1까지 감소

    -- FOR i IN 1..4             -- counter 변수의 범위: 1 ~ 4까지 증가
    -- LOOP    

        -- DBMS_OUTPUT 패키지의 put_line() 함수(Function):
        --  a. PL/SQL block 에서, 값을 출력하기 위해 제공되는 함수
        --  b. 문자열 리터털 및 변수 출력
        DBMS_OUTPUT.put_line( counter || '. Hello' );
        -- DBMS_OUTPUT.put_line( i || '. Hello' );

    END LOOP;   -- END FOR: 반복문의 끝은 세미콜론(;) 으로 마감처리

END;    -- 실행부 끝, PL/SQL Block 의 끝은, 세미콜론(;)으로 마감처리(**주의**)


-- ------------------------------------------------------
-- 3-8. PL/SQL 반복문: CONTINE/EXIT 키워드
-- ------------------------------------------------------
--  가. 두 키워드는 반복문과 함께 사용됨
--  나. 일반적인 프로그래밍 언어(파이썬)의 키워드와 거의 비슷
--  다. EXIT 키워드:
--      a. 명시적으로 반복문을 빠져나올 때 사용
--      b. PL/SQL 에서는, BREAK 키워드는 제공하지 않음
--      c. 대신 EXIT 키워드가 동일 역할 수행
--  라. CONTINUE 키워드:
--      a. 프로그래밍 언어의 키워드와 그 역할과 기능이 동일
--      b. 반복문 내에서, 남아있는 처리로직(실행문장들)을 건너뛰고,
--      c. 다시 실행제어를 반복문의 처음으로 돌아감
--         (WHILE문 -> 조건식, FOR문 -> counter 변수의 증감 등)
-- ------------------------------------------------------




